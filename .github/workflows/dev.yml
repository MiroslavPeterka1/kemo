name: Merge DEV
on:
  pull_request:
    branches: ["dev"]
  push:
    branches: ["dev"]

    # Postup:
    #  1) vyřešit aby se opravdu posílali chyby pouze když if failure -> prostřeleno
    #  2) Zkusit poslat do chyb to co je na výstupu -> prostřeleno
    #  3) doplnit template pro create-issue-format -> prostřeleno
    #  4) připojit slack, aby odeslílal message pro každe issue
    #  5) Vybuildění apk
    #  6) Připojení apk jako artefakt
    #  7) Získání url na artefakt
    #  8) Poslat do firebase testLab
    #  9) Pokud v testlab chyba -> issue -> slack
    #  10) Pokud je vše ok, slac - linkem na apk

jobs:
  # format-files:
  #   runs-on: ubuntu-latest
  #   steps:
  # - uses: actions/checkout@v2
  # - uses: dart-lang/setup-dart@v1
  # - uses: subosito/flutter-action@v2
  #   with:
  #     flutter-version: '2.10.1'
  #     channel: 'stable'
  # - name: Install dependencies
  #   run: flutter pub get

  # - name: Verify formatting dart
  #   continue-on-error: true
  #   run: |
  #     libFiles=`find ./lib/ -type f -not -regex ".*\.\(freezed\|gr\|g\).dart" -not -name "*.arb"`
  #     for file in $libFiles
  #     do
  #         dart format --line-length 100 --output=none --set-exit-if-changed $file
  #     done
  #   if: failure()
  # - uses: dblock/create-a-github-issue@v3
  #   id: create-issue-format
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # - run: 'echo number: ${{ steps.create-issue-format.outputs.number }}'
  # - run: 'echo status: ${{ steps.create-issue-format.outputs.status }}'
  # - run: 'echo url: ${{ steps.create-issue-format.outputs.url }}'
  # - name: Job result
  #   run: |
  #     if [[ ${{ steps.create-issue-format.outputs.number }} == '' ]]; then exit 0; else exit 1; fi

  analyze-lint:
    runs-on: ubuntu-latest
    steps:
      # init
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "2.10.1"
          channel: "stable"
      - name: Install dependencies
        run: flutter pub get
        # actual steps
      - name: Analyze code
        uses: invertase/github-action-dart-analyzer@v1
        id: lint-action
        with:
          fatal-infos: true
          fatal-warnings: true
          annotate: true
          annotate-only: false
          working-directory: ./
      - name: Create issue if failed
        if: failure()
        uses: dblock/create-a-github-issue@v3
        id: create-issue-lint
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_WORKFLOW: GITHUB_WORKFLOW
          JOB_TITLE: "analyze-lint"
          BODY_TEXT: "Analyzer outputs:\nInfos: ${{steps.lint-action.outputs.infos}}\nWarnings: ${{steps.lint-action.outputs.warnings}}\nErrors: ${{steps.lint-action.outputs.errors}}"
      - name: Send Slack Message - New Issue
        if: always() && steps.create-issue-lint.outputs.number != ''
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
            "text": "GitHub Action build result: ",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "!!!New issue occcure while ${{ GITHUB_WORKFLOW }} - analyze-lint!!!",
                  "emoji": true
                  }
                },
                {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Created issue:*\n<${{ steps.create-issue-lint.outputs.url }}|${{ steps.create-issue-lint.outputs.number }} - ${{ steps.create-issue-lint.outputs.status }}>"
                  }
                },
                {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Related to pull request:*\n${{ github.event.pull_request.html_url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      - name: TEST ECHO
        if: always()
        run: |
          echo number: ${{ steps.create-issue-lint.outputs.number }}
          echo status: ${{ steps.create-issue-lint.outputs.status }}
          echo url: ${{ steps.create-issue-lint.outputs.url }}
          echo value from analyzer - infos: ${{ steps.lint-action.outputs.infos }}
          echo value from analyzer - warnings: ${{ steps.lint-action.outputs.warnings }}
          echo value from analyzer - errors: ${{ steps.lint-action.outputs.errors }}
          echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"

  # remove-originalbranch:
  #   runs-on: ubuntu-latest
  #   needs: ['format-files', 'lint-analyze'] // spustí se až po doběhnutí předchozích kroků

#  test:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: dart-lang/setup-dart@v1
#      - uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '2.5.3'
#          channel: 'stable'
#
#      - name: Install dependencies
#        run: flutter pub get
#
#      - name: Copy .env.example into .env file
#        run: |
#          cp ./assets/.env.example ./assets/.env
#
#      - name: Run tests flutter
#        run: flutter test
